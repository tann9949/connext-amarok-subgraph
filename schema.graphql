type BridgeTransaction @entity(immutable: true) {
    id: ID!
    sourceChain: String
    destinationChain: String
    destinationDomain: BigInt
    from: String
    to: Bytes,
    asset: Token
    delegate: Bytes
    amount: BigInt
    slippage: BigInt
    callData: Bytes
}

type ArbitraryMessageTransaction @entity(immutable: true) {
    id: ID!
    sourceChain: String
    destinationChain: String
    destinationDomain: BigInt
    from: String
    to: Bytes
    callData: Bytes
}

"""Maps remote contract on a specific domain"""
type Remote @entity {
    id: ID!
    originChain: String
    remoteChain: String
    caller: String
}

type Token @entity(immutable: true) {
    id: ID!
    name: String
    symbol: String
    decimals: BigInt
}

type Relayer @entity {
    id: ID!
}

type Sequencer @entity {
    id: ID!
}

type Router @entity {
    "Routers owner"
    id: ID!
    approver: String
    approved: Boolean
    tokens: [Token!]
    balances: [BigInt!]
}

type AddLiquidityTransaction @entity(immutable: true) {
    id: ID!
    liquidityProvider: String
    amount: BigInt
    token: Token
    router: Router
}

type RemoveLiquidityTransaction @entity(immutable: true) {
    id: ID!
    liquidityProvider: String
    amount: BigInt
    token: Token
    router: Router
}